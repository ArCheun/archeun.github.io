<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>archeun blog</title><link>https://archeun.github.io/</link><description>Recent content on archeun blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://archeun.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing better code with .call() and .apply()</title><link>https://archeun.github.io/blog/writing-better-code-with-call-and-apply/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>https://archeun.github.io/blog/writing-better-code-with-call-and-apply/</guid><description>The prototype of the Javascript Function object exposes two valuable methods named call() and apply(). In this article, we will see how to use these two methods effectively in our code. The content and some examples of this article are based on the MDN documentation of the Function.prototype.call() and Function.prototype.apply().
First, let&amp;rsquo;s understand what each of these methods does.
.call() What it does The call() function is used (as the name suggests) to call a function by providing this context to it.</description></item><item><title>JavaScript Object Property Descriptors</title><link>https://archeun.github.io/blog/javascript-object-property-descriptors/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://archeun.github.io/blog/javascript-object-property-descriptors/</guid><description>A JavaScript object is composed of a set of property: value pairs, where the property is a string and the value can be any valid JavaScript data type. Here is an example.
const user = { name: &amp;#39;John&amp;#39;, }; Javascript Object Property Descriptors Most of the time, developers deal with the value part of the object properties. We define object property values in a variety of ways ranging from strings, numbers, objects, and functions, etc.</description></item><item><title>JavaScript Inheritance - Part 1</title><link>https://archeun.github.io/blog/javascript-inheritance-part-1/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate><guid>https://archeun.github.io/blog/javascript-inheritance-part-1/</guid><description>Learning Outcomes In this post, we will find out why JavaScript inheritance looks different compared to other programming languages. We will cover the below topics.
How do other programming languages model inheritance? Introduction to inheritance in Javascript Why inheritance in JavaScript is confusing While JavaScript has gained huge popularity over the past decade, developers still struggle on understanding how it models inheritance. This is due to the unconventional way that JavaScript approaches this OOP concept.</description></item><item><title>Eliminating the boring apps through Low Code Platforms</title><link>https://archeun.github.io/blog/eliminating-the-boring-apps-through-low-code-platforms/</link><pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate><guid>https://archeun.github.io/blog/eliminating-the-boring-apps-through-low-code-platforms/</guid><description>If you are reading this post, there is a high chance that you might be using various software, apps, or tools at work and in your personal life. Haven&amp;rsquo;t you ever wondered that most of those apps share a common set of features? Haven&amp;rsquo;t you ever felt that most of them can be combined into one app or a platform so you can manage everything from a single place?
Low or no-code platforms (will be referred to as &amp;lsquo;low code platforms&amp;rsquo; hereafter) are there to solve this problem.</description></item><item><title>Introduction to 'Low | No Code Software Development'</title><link>https://archeun.github.io/blog/introduction-to-low-or-no-code-software-development/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://archeun.github.io/blog/introduction-to-low-or-no-code-software-development/</guid><description>Humans like to automate things. Computing goes back to the age where our early ancestors used Abacus for calculations. Since then, the concepts like calculation, computation, data gathering, data processing have been evolved to a great extent. These concepts have played a vital role in the daily life of humans for a long time. As we evolved to be an intelligent race, there was one critically important skill which helped us to distinguish from other animals.</description></item></channel></rss>